/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_UI__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/UI */ \"./src/modules/UI.js\");\n/* harmony import */ var _modules_Storage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/Storage */ \"./src/modules/Storage.js\");\n/* harmony import */ var _modules_Modal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modules/Modal */ \"./src/modules/Modal.js\");\n\r\n\r\n\r\n\r\n// Get the buttons\r\nconst addProjectBtn = document.querySelector('.add-project');\r\nconst addTaskBtn = document.querySelector('.add-task');\r\n\r\n// Add event listener for the \"Add Project\" button\r\naddProjectBtn.addEventListener('click', () => {\r\n    (0,_modules_Modal__WEBPACK_IMPORTED_MODULE_2__.openProjectModal)((projectName) => {\r\n        (0,_modules_UI__WEBPACK_IMPORTED_MODULE_0__.createProject)(projectName); // Create the project\r\n        (0,_modules_UI__WEBPACK_IMPORTED_MODULE_0__.loadProjectToUi)(); // Refresh the UI\r\n    });\r\n});\r\n\r\n// Add event listener for the \"Add Task\" button\r\naddTaskBtn.addEventListener('click', () => {\r\n    const selectedProject = document.querySelector('.content-heading').textContent;\r\n    const projects = JSON.parse(localStorage.getItem('Projects')) || [];\r\n    const project = projects.find(proj => proj.name === selectedProject);\r\n\r\n    if (project) {\r\n        (0,_modules_Modal__WEBPACK_IMPORTED_MODULE_2__.openTaskModal)((newTask) => {\r\n            (0,_modules_Storage__WEBPACK_IMPORTED_MODULE_1__.addTaskToProject)(project.id, newTask); // Add the task to the selected project\r\n            (0,_modules_UI__WEBPACK_IMPORTED_MODULE_0__.displayTasksForProject)(project.id); // Display tasks for the selected project\r\n        });\r\n    } else {\r\n        alert('Please select a project first.');\r\n    }\r\n});\r\n\r\n// Get the category elements\r\nconst homeCategory = document.querySelector('.home');\r\nconst todayCategory = document.querySelector('.today');\r\nconst weekCategory = document.querySelector('.week');\r\n\r\n// Add event listeners for the categories\r\nhomeCategory.addEventListener('click', () => {\r\n    document.querySelector('.content-heading').textContent = 'Home';\r\n    addTaskBtn.style.display = 'none'; // Hide the Add Task button\r\n    (0,_modules_UI__WEBPACK_IMPORTED_MODULE_0__.displayAllTasks)(); // Display all tasks\r\n});\r\n\r\ntodayCategory.addEventListener('click', () => {\r\n    document.querySelector('.content-heading').textContent = 'Today';\r\n    addTaskBtn.style.display = 'none'; // Hide the Add Task button\r\n    (0,_modules_UI__WEBPACK_IMPORTED_MODULE_0__.displayTodaysTasks)(); // Display today's tasks\r\n});\r\n\r\nweekCategory.addEventListener('click', () => {\r\n    document.querySelector('.content-heading').textContent = 'Week';\r\n    addTaskBtn.style.display = 'none'; // Hide the Add Task button\r\n    (0,_modules_UI__WEBPACK_IMPORTED_MODULE_0__.displayThisWeeksTasks)(); // Display this week's tasks\r\n});\r\n\r\n// Load projects into the UI when the page loads\r\nwindow.addEventListener('load', () => {\r\n    (0,_modules_UI__WEBPACK_IMPORTED_MODULE_0__.loadProjectToUi)();\r\n});\n\n//# sourceURL=webpack://odin-todo-list/./src/index.js?");

/***/ }),

/***/ "./src/modules/Modal.js":
/*!******************************!*\
  !*** ./src/modules/Modal.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   openProjectModal: () => (/* binding */ openProjectModal),\n/* harmony export */   openTaskModal: () => (/* binding */ openTaskModal)\n/* harmony export */ });\n// Function to open the project modal\r\nfunction openProjectModal(callback) {\r\n    const modal = document.createElement('div');\r\n    modal.classList.add('modal');\r\n\r\n    const modalContent = document.createElement('div');\r\n    modalContent.classList.add('modal-content');\r\n\r\n    const projectNameInput = document.createElement('input');\r\n    projectNameInput.type = 'text';\r\n    projectNameInput.placeholder = 'Enter project name';\r\n\r\n    const submitButton = document.createElement('button');\r\n    submitButton.textContent = 'Create Project';\r\n\r\n    const cancelButton = document.createElement('button');\r\n    cancelButton.textContent = 'Cancel';\r\n    cancelButton.classList.add('cancel-button');\r\n\r\n    // Add an event listener to the submit button\r\n    submitButton.addEventListener('click', () => {\r\n        const projectName = projectNameInput.value.trim();\r\n        if (projectName) {\r\n            callback(projectName); // Pass the project name to the callback\r\n            modal.remove();\r\n        } else {\r\n            alert('Project name cannot be empty!');\r\n        }\r\n    });\r\n\r\n    // Add an event listener to the cancel button\r\n    cancelButton.addEventListener('click', () => {\r\n        modal.remove(); // Close the modal without performing any action\r\n    });\r\n\r\n    modalContent.appendChild(projectNameInput);\r\n    modalContent.appendChild(submitButton);\r\n    modalContent.appendChild(cancelButton);\r\n    modal.appendChild(modalContent);\r\n\r\n    document.body.appendChild(modal);\r\n}\r\n\r\n// Function to open the task modal\r\nfunction openTaskModal(callback) {\r\n    const modal = document.createElement('div');\r\n    modal.classList.add('modal');\r\n\r\n    const modalContent = document.createElement('div');\r\n    modalContent.classList.add('modal-content');\r\n\r\n    const taskTitleInput = document.createElement('input');\r\n    taskTitleInput.type = 'text';\r\n    taskTitleInput.placeholder = 'Enter task title';\r\n\r\n    const taskDescriptionInput = document.createElement('input');\r\n    taskDescriptionInput.type = 'text';\r\n    taskDescriptionInput.placeholder = 'Enter task description';\r\n\r\n    const taskDueDateInput = document.createElement('input');\r\n    taskDueDateInput.type = 'date';\r\n    taskDueDateInput.placeholder = 'Enter task due date';\r\n\r\n    const taskPriorityInput = document.createElement('select');\r\n    taskPriorityInput.innerHTML = `\r\n        <option value=\"High\">High</option>\r\n        <option value=\"Medium\">Medium</option>\r\n        <option value=\"Low\">Low</option>\r\n    `;\r\n\r\n    const submitButton = document.createElement('button');\r\n    submitButton.textContent = 'Add Task';\r\n\r\n    const cancelButton = document.createElement('button');\r\n    cancelButton.textContent = 'Cancel';\r\n    cancelButton.classList.add('cancel-button');\r\n\r\n    // Add an event listener to the submit button\r\n    submitButton.addEventListener('click', () => {\r\n        const task = {\r\n            title: taskTitleInput.value.trim(),\r\n            description: taskDescriptionInput.value.trim(),\r\n            dueDate: taskDueDateInput.value,\r\n            priority: taskPriorityInput.value,\r\n            done: false,\r\n            id: Date.now().toString()\r\n        };\r\n\r\n        if (task.title) {\r\n            callback(task); // Pass the task object to the callback\r\n            modal.remove();\r\n        } else {\r\n            alert('Task title cannot be empty!');\r\n        }\r\n    });\r\n\r\n    // Add an event listener to the cancel button\r\n    cancelButton.addEventListener('click', () => {\r\n        modal.remove(); // Close the modal without performing any action\r\n    });\r\n\r\n    modalContent.appendChild(taskTitleInput);\r\n    modalContent.appendChild(taskDescriptionInput);\r\n    modalContent.appendChild(taskDueDateInput);\r\n    modalContent.appendChild(taskPriorityInput);\r\n    modalContent.appendChild(submitButton);\r\n    modalContent.appendChild(cancelButton);\r\n    modal.appendChild(modalContent);\r\n\r\n    document.body.appendChild(modal);\r\n}\n\n//# sourceURL=webpack://odin-todo-list/./src/modules/Modal.js?");

/***/ }),

/***/ "./src/modules/Project.js":
/*!********************************!*\
  !*** ./src/modules/Project.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Project: () => (/* binding */ Project)\n/* harmony export */ });\nclass Project{\r\n    constructor(name) {\r\n        this.name = name;\r\n        this.tasks = [];\r\n        this.id = Date.now().toString();\r\n    }\r\n\r\n    addTask() {\r\n        this.tasks.push(task);\r\n    }\r\n\r\n    deleteTask(taskIndex) {\r\n        this.tasks.splice(taskIndex, 1);\r\n    }\r\n\r\n    editProject(projectName) {\r\n        this.name = projectName;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://odin-todo-list/./src/modules/Project.js?");

/***/ }),

/***/ "./src/modules/Storage.js":
/*!********************************!*\
  !*** ./src/modules/Storage.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addTaskToProject: () => (/* binding */ addTaskToProject),\n/* harmony export */   deleteProject: () => (/* binding */ deleteProject),\n/* harmony export */   deleteTaskFromProject: () => (/* binding */ deleteTaskFromProject),\n/* harmony export */   editProject: () => (/* binding */ editProject),\n/* harmony export */   editTaskInProject: () => (/* binding */ editTaskInProject),\n/* harmony export */   loadProjects: () => (/* binding */ loadProjects),\n/* harmony export */   storeProject: () => (/* binding */ storeProject),\n/* harmony export */   toggleTaskStateInProject: () => (/* binding */ toggleTaskStateInProject)\n/* harmony export */ });\n// Function to store a project in localStorage\r\nfunction storeProject(projectObject) {\r\n    let projectsArray = JSON.parse(localStorage.getItem('Projects')) || [];\r\n    projectsArray.push(projectObject);\r\n    localStorage.setItem('Projects', JSON.stringify(projectsArray));\r\n}\r\n\r\n// Function to load projects from localStorage\r\nfunction loadProjects() {\r\n    try {\r\n        const projectsData = localStorage.getItem('Projects');\r\n        return projectsData ? JSON.parse(projectsData) : [];\r\n    } catch (error) {\r\n        console.error('Error loading projects from localStorage:', error);\r\n        return [];\r\n    }\r\n}\r\n\r\n// Function to delete a project from localStorage\r\nfunction deleteProject(projectId) {\r\n    const projectsData = JSON.parse(localStorage.getItem('Projects')) || [];\r\n    const updatedProjects = projectsData.filter(project => project.id !== projectId);\r\n    localStorage.setItem('Projects', JSON.stringify(updatedProjects));\r\n}\r\n\r\n// Function to edit a project in localStorage\r\nfunction editProject(projectId, newProjectName) {\r\n    const projectsData = JSON.parse(localStorage.getItem('Projects')) || [];\r\n    const projectToEdit = projectsData.find(project => project.id === projectId);\r\n    if (projectToEdit) {\r\n        projectToEdit.name = newProjectName;\r\n        localStorage.setItem('Projects', JSON.stringify(projectsData));\r\n    }\r\n}\r\n\r\n// Function to delete a task from a project\r\nfunction deleteTaskFromProject(projectId, taskId) {\r\n    const projectsData = JSON.parse(localStorage.getItem('Projects')) || [];\r\n    const projectToUpdate = projectsData.find(project => project.id === projectId);\r\n    if (projectToUpdate) {\r\n        projectToUpdate.tasks = projectToUpdate.tasks.filter(task => task.id !== taskId);\r\n        localStorage.setItem('Projects', JSON.stringify(projectsData));\r\n    }\r\n}\r\n\r\n// Function to add a task to a project\r\nfunction addTaskToProject(projectId, task) {\r\n    const projectsData = JSON.parse(localStorage.getItem('Projects')) || [];\r\n    const projectToUpdate = projectsData.find(project => project.id === projectId);\r\n    if (projectToUpdate) {\r\n        projectToUpdate.tasks.push(task);\r\n        localStorage.setItem('Projects', JSON.stringify(projectsData));\r\n    }\r\n}\r\n\r\n// Function to edit a task in a project\r\nfunction editTaskInProject(projectId, taskId, updatedTask) {\r\n    const projectsData = JSON.parse(localStorage.getItem('Projects')) || [];\r\n    const projectToUpdate = projectsData.find(project => project.id === projectId);\r\n    if (projectToUpdate) {\r\n        const taskToEdit = projectToUpdate.tasks.find(task => task.id === taskId);\r\n        if (taskToEdit) {\r\n            Object.assign(taskToEdit, updatedTask);\r\n            localStorage.setItem('Projects', JSON.stringify(projectsData));\r\n        }\r\n    }\r\n}\r\n\r\n// Function to toggle a task's state in a project\r\nfunction toggleTaskStateInProject(projectId, taskId) {\r\n    const projectsData = JSON.parse(localStorage.getItem('Projects')) || [];\r\n    const projectToUpdate = projectsData.find(project => project.id === projectId);\r\n    if (projectToUpdate) {\r\n        const taskToToggle = projectToUpdate.tasks.find(task => task.id === taskId);\r\n        if (taskToToggle) {\r\n            taskToToggle.done = !taskToToggle.done;\r\n            localStorage.setItem('Projects', JSON.stringify(projectsData));\r\n        }\r\n    }\r\n}\n\n//# sourceURL=webpack://odin-todo-list/./src/modules/Storage.js?");

/***/ }),

/***/ "./src/modules/UI.js":
/*!***************************!*\
  !*** ./src/modules/UI.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createProject: () => (/* binding */ createProject),\n/* harmony export */   displayAllTasks: () => (/* binding */ displayAllTasks),\n/* harmony export */   displayTasksForProject: () => (/* binding */ displayTasksForProject),\n/* harmony export */   displayThisWeeksTasks: () => (/* binding */ displayThisWeeksTasks),\n/* harmony export */   displayTodaysTasks: () => (/* binding */ displayTodaysTasks),\n/* harmony export */   loadProjectToUi: () => (/* binding */ loadProjectToUi)\n/* harmony export */ });\n/* harmony import */ var _Storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Storage */ \"./src/modules/Storage.js\");\n/* harmony import */ var _Project__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Project */ \"./src/modules/Project.js\");\n/* harmony import */ var _Modal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Modal */ \"./src/modules/Modal.js\");\n\r\n\r\n\r\n\r\n// Function to create a new project and add it to the UI\r\nfunction createProject(projectName) {\r\n    const projectsDiv = document.querySelector('.project-projects');\r\n\r\n    // Create a new Project instance with a unique ID\r\n    const newProject = new _Project__WEBPACK_IMPORTED_MODULE_1__.Project(projectName);\r\n\r\n    // Create a paragraph element for the project\r\n    const proj = document.createElement('p');\r\n    proj.classList.add('project');\r\n    proj.textContent = newProject.name;\r\n\r\n    // Create an Edit Project button\r\n    const editProjectButton = document.createElement('button');\r\n    editProjectButton.classList.add('edit-project');\r\n    editProjectButton.textContent = 'Edit Project';\r\n\r\n    // Add an event listener to the Edit Project button\r\n    editProjectButton.addEventListener('click', (e) => {\r\n        e.stopPropagation(); // Prevent the project click event from firing\r\n        (0,_Modal__WEBPACK_IMPORTED_MODULE_2__.openProjectModal)((newProjectName) => {\r\n            (0,_Storage__WEBPACK_IMPORTED_MODULE_0__.editProject)(newProject.id, newProjectName); // Edit the project\r\n            loadProjectToUi(); // Refresh the UI\r\n        });\r\n    });\r\n\r\n    // Create a Delete Project button\r\n    const delProject = document.createElement('button');\r\n    delProject.classList.add('delete-project');\r\n    delProject.textContent = 'Delete Project';\r\n\r\n    // Add an event listener to the Delete Project button\r\n    delProject.addEventListener('click', (e) => {\r\n        e.stopPropagation(); // Prevent the project click event from firing\r\n        document.querySelector('.content-heading').textContent = ''; // Force clear the content-heading div\r\n        const confirmDelete = confirm('Are you sure you want to delete this project?');\r\n        if (confirmDelete) {\r\n            (0,_Storage__WEBPACK_IMPORTED_MODULE_0__.deleteProject)(newProject.id); // Delete the project by ID\r\n            loadProjectToUi(); // Refresh the UI\r\n        }\r\n    });\r\n\r\n    // Append the Edit and Delete buttons to the project element\r\n    proj.appendChild(editProjectButton);\r\n    proj.appendChild(delProject);\r\n\r\n    // Append the project element to the projects container\r\n    projectsDiv.appendChild(proj);\r\n\r\n    // Store the new project in localStorage\r\n    (0,_Storage__WEBPACK_IMPORTED_MODULE_0__.storeProject)(newProject);\r\n}\r\n\r\n// Function to display tasks for the selected project\r\nfunction displayTasksForProject(projectId) {\r\n    const projects = JSON.parse(localStorage.getItem('Projects')) || [];\r\n    const project = projects.find(proj => proj.id === projectId);\r\n    const tasksDiv = document.querySelector('.tasks');\r\n\r\n    if (project) {\r\n        tasksDiv.innerHTML = ''; // Clear the tasks div\r\n\r\n        // Display the tasks for the selected project\r\n        project.tasks.forEach((task) => {\r\n            const taskContainer = createTaskContainer(task, project.id);\r\n            tasksDiv.appendChild(taskContainer);\r\n        });\r\n    }\r\n}\r\n\r\n// Function to display all tasks from all projects\r\nfunction displayAllTasks() {\r\n    const projects = JSON.parse(localStorage.getItem('Projects')) || [];\r\n    const tasksDiv = document.querySelector('.tasks');\r\n    tasksDiv.innerHTML = ''; // Clear the tasks div\r\n\r\n    projects.forEach((project) => {\r\n        project.tasks.forEach((task) => {\r\n            const taskContainer = createTaskContainer(task, project.id);\r\n            tasksDiv.appendChild(taskContainer);\r\n        });\r\n    });\r\n}\r\n\r\n// Function to display today's tasks\r\nfunction displayTodaysTasks() {\r\n    const today = new Date().toISOString().split('T')[0]; // Get today's date in YYYY-MM-DD format\r\n    const projects = JSON.parse(localStorage.getItem('Projects')) || [];\r\n    const tasksDiv = document.querySelector('.tasks');\r\n    tasksDiv.innerHTML = ''; // Clear the tasks div\r\n\r\n    projects.forEach((project) => {\r\n        project.tasks.forEach((task) => {\r\n            if (task.dueDate === today) {\r\n                const taskContainer = createTaskContainer(task, project.id);\r\n                tasksDiv.appendChild(taskContainer);\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n// Function to display this week's tasks\r\nfunction displayThisWeeksTasks() {\r\n    const today = new Date();\r\n    const startOfWeek = new Date(today);\r\n    startOfWeek.setDate(today.getDate() - today.getDay()); // Start of the week (Sunday)\r\n    const endOfWeek = new Date(today);\r\n    endOfWeek.setDate(today.getDate() + (6 - today.getDay())); // End of the week (Saturday)\r\n\r\n    const projects = JSON.parse(localStorage.getItem('Projects')) || [];\r\n    const tasksDiv = document.querySelector('.tasks');\r\n    tasksDiv.innerHTML = ''; // Clear the tasks div\r\n\r\n    projects.forEach((project) => {\r\n        project.tasks.forEach((task) => {\r\n            const taskDate = new Date(task.dueDate);\r\n            if (taskDate >= startOfWeek && taskDate <= endOfWeek) {\r\n                const taskContainer = createTaskContainer(task, project.id);\r\n                tasksDiv.appendChild(taskContainer);\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n// Helper function to create a task container\r\nfunction createTaskContainer(task, projectId) {\r\n    const taskContainer = document.createElement('div');\r\n    taskContainer.classList.add('task-container');\r\n\r\n    const taskCheck = document.createElement('input');\r\n    taskCheck.type = 'checkbox';\r\n    taskCheck.classList.add('task-check');\r\n    taskCheck.checked = task.done;\r\n\r\n    const taskTitle = document.createElement('p');\r\n    taskTitle.textContent = task.title;\r\n    taskTitle.classList.add('task-title');\r\n    taskTitle.style.textDecoration = task.done ? 'line-through' : 'none';\r\n\r\n    const taskDescription = document.createElement('p');\r\n    taskDescription.textContent = task.description;\r\n    taskDescription.classList.add('task-description');\r\n\r\n    const taskDate = document.createElement('span');\r\n    taskDate.textContent = task.dueDate;\r\n    taskDate.classList.add('task-date');\r\n\r\n    const taskPriority = document.createElement('span');\r\n    taskPriority.textContent = task.priority;\r\n    taskPriority.classList.add('task-priority');\r\n\r\n    const editTask = document.createElement('button');\r\n    editTask.textContent = 'Edit task';\r\n    editTask.classList.add('edit-task');\r\n\r\n    const deleteTask = document.createElement('button');\r\n    deleteTask.textContent = 'Delete task';\r\n    deleteTask.classList.add('delete-task');\r\n\r\n    // Add event listeners for task actions\r\n    taskCheck.addEventListener('change', () => {\r\n        (0,_Storage__WEBPACK_IMPORTED_MODULE_0__.toggleTaskStateInProject)(projectId, task.id);\r\n        taskTitle.style.textDecoration = taskCheck.checked ? 'line-through' : 'none';\r\n    });\r\n\r\n    deleteTask.addEventListener('click', () => {\r\n        const confirmDelete = confirm('Are you sure you want to delete this task?');\r\n        if (confirmDelete) {\r\n            (0,_Storage__WEBPACK_IMPORTED_MODULE_0__.deleteTaskFromProject)(projectId, task.id); // Delete the task from localStorage\r\n            taskContainer.remove(); // Remove the task container from the UI instantly\r\n        }\r\n    });\r\n\r\n    editTask.addEventListener('click', () => {\r\n        (0,_Modal__WEBPACK_IMPORTED_MODULE_2__.openTaskModal)((updatedTask) => {\r\n            (0,_Storage__WEBPACK_IMPORTED_MODULE_0__.editTaskInProject)(projectId, task.id, updatedTask);\r\n            loadProjectToUi(); // Refresh the UI\r\n        });\r\n    });\r\n\r\n    // Append elements to the task container\r\n    taskContainer.appendChild(taskCheck);\r\n    taskContainer.appendChild(taskTitle);\r\n    taskContainer.appendChild(taskDescription);\r\n    taskContainer.appendChild(taskDate);\r\n    taskContainer.appendChild(taskPriority);\r\n    taskContainer.appendChild(editTask);\r\n    taskContainer.appendChild(deleteTask);\r\n\r\n    return taskContainer;\r\n}\r\n\r\nfunction loadProjectToUi() {\r\n    const projectsDiv = document.querySelector('.project-projects');\r\n    const contentHeading = document.querySelector('.content-heading');\r\n    const addTaskBtn = document.querySelector('.add-task');\r\n\r\n    // Clear the existing content in the projects container\r\n    projectsDiv.innerHTML = '';\r\n\r\n    // Load projects from localStorage\r\n    const projectsArr = (0,_Storage__WEBPACK_IMPORTED_MODULE_0__.loadProjects)();\r\n\r\n    // Loop through the projects and create UI elements for each\r\n    projectsArr.forEach((project) => {\r\n        const proj = document.createElement('p');\r\n        proj.classList.add('project');\r\n        proj.textContent = project.name;\r\n\r\n        // Create an Edit Project button\r\n        const editProjectButton = document.createElement('button');\r\n        editProjectButton.classList.add('edit-project');\r\n        editProjectButton.textContent = 'Edit Project';\r\n\r\n        // Add an event listener to the Edit Project button\r\n        editProjectButton.addEventListener('click', (e) => {\r\n            e.stopPropagation(); // Prevent the project click event from firing\r\n            (0,_Modal__WEBPACK_IMPORTED_MODULE_2__.openProjectModal)((newProjectName) => {\r\n                (0,_Storage__WEBPACK_IMPORTED_MODULE_0__.editProject)(project.id, newProjectName); // Edit the project\r\n                loadProjectToUi(); // Refresh the UI\r\n            });\r\n        });\r\n\r\n        // Create a Delete Project button\r\n        const delProject = document.createElement('button');\r\n        delProject.classList.add('delete-project');\r\n        delProject.textContent = 'Delete Project';\r\n\r\n        // Add an event listener to the Delete Project button\r\n        delProject.addEventListener('click', (e) => {\r\n            e.stopPropagation(); // Prevent the project click event from firing\r\n            document.querySelector('.content-heading').textContent = ''; // Force clear the content-heading div\r\n            const confirmDelete = confirm('Are you sure you want to delete this project?');\r\n            if (confirmDelete) {\r\n                (0,_Storage__WEBPACK_IMPORTED_MODULE_0__.deleteProject)(project.id); // Delete the project by ID\r\n                loadProjectToUi(); // Refresh the UI\r\n            }\r\n        });\r\n\r\n        // Append the Edit and Delete buttons to the project element\r\n        proj.appendChild(editProjectButton);\r\n        proj.appendChild(delProject);\r\n\r\n        // Add an event listener to the project element\r\n        proj.addEventListener('click', () => {\r\n            contentHeading.textContent = project.name;\r\n            addTaskBtn.style.display = 'block'; // Show the Add Task button\r\n            displayTasksForProject(project.id); // Display tasks for the selected project\r\n        });\r\n\r\n        // Append the project element to the projects container\r\n        projectsDiv.appendChild(proj);\r\n    });\r\n}\n\n//# sourceURL=webpack://odin-todo-list/./src/modules/UI.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;